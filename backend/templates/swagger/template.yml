swagger: '3.0'
info:
  title: 'Apyllon - A multi-user media player'
  description: 'Backend REST-API definition'
  version: '0.1'

tags:
- name: "User"
  description: "User related requests like registration, verification and
  information requests"
- name: "Username"
  description: "User related requests by username"
- name: "UID"
  description: "User related requests by id"
- name: "Auth"
  description: "Authentication related requests"
- name: "Player"
  description: "Player access and control"

definitions:
  # User
  User:
    type: object
    properties:
      id:
        type: integer
        example: 1943
      username:
        type: string
        example: Biskit1943
  UserJWT:
    type: object
    properties:
      id:
        type: integer
        example: 1943
      username:
        type: string
        example: Biskit1943
      token:
        type: string
        example: ey...J9.ey...19.fR...gM
  UserRegister:
    type: object
    properties:
      password:
        type: string
        description: A Blake2 password-hash as hex string
        example: 5bb55...faac2
      username:
        type: string
        example: Biskit1943
  Users:
    type: array
    items:
      $ref: '#/definitions/User'

  # Songs
  Song:
    type: object
    properties:
      sid:
        type: integer
        description: The id of the song
        example: 1
      filename:
        type: string
        description: The name of the file (Not the path)
        example: rockstar.mp3
      path:
        type: string
        description: The path to the file (Not the name)
        example: /home/user/Music/Post\ Malone/beerbongs\ &\ bentleys/
      length:
        type: integer
        description: The length of the song in seconds
        example: 230
      meta:
        type: object
        description: The meta information of a song
        properties:
          artist:
            type: string
            description: The artist of the song (Comma separated if more than one)
            example: Post Malone, 21 Savage
          title:
            type: string
            description: The title of the song
            example: rockstar
          album:
            type: string
            description: The name of the album
            example: beerbongs & bentleys
          genre:
            type: string
            description: The genre what else (Comma separated if more than one)
            example: R&B, Hip-Hop/Rap
  Songs:
    type: array
    items:
      $ref: "#/definitions/Song"

  # Errors
  BadRequest:
    type: object
    properties:
      error:
        type: string
        description: The error message
        example: Missing parameter xy
      expected:
        schema:
          oneOf:
            $ref: '#/definitions/User'

  Conflict:
    type: object
    properties:
      error:
        type: string
        description: The error message
        example: xy already exist
